// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  password            String // For email/password auth
  spotifyId           String? // Optional: for Spotify-connected users
  spotifyToken        String? // Optional: to store Spotify access token
  spotifyRefreshToken String? 
  rooms               Room[]   @relation("RoomParticipants")
  hostedRooms         Room[]   @relation("HostRoom")
  votes               Vote[] // Track user votes
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Room {
  id           String   @id @default(uuid())
  name         String
  hostId       String
  host         User     @relation("HostRoom", fields: [hostId], references: [id])
  participants User[]   @relation("RoomParticipants")
  queue        Song[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Song {
  id         String    @id @default(uuid())
  title      String
  artist     String
  spotifyUri String // Spotify track identifier
  votes      Vote[] // Relation to track individual votes
  totalVotes Int       @default(0)
  roomId     String
  room       Room      @relation(fields: [roomId], references: [id])
  addedBy    String // User ID who added the song
  lastPlayed DateTime? // For cooldown feature
  createdAt  DateTime  @default(now())
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  songId    String
  value     Int // Could be 1 for upvote, -1 for downvote if you want that feature
  user      User     @relation(fields: [userId], references: [id])
  song      Song     @relation(fields: [songId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, songId]) // Prevent duplicate votes
}
